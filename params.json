{"name":"Pml-project","tagline":"Writeup","body":"# Practical Machine Learning Course Project\r\nAzeez, Jawad Ahmad\r\n\r\nAugust 22, 2015\r\n##Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n##Data\r\n\r\nThe training data for this project are available here: [https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv]\r\n\r\nThe test data are available here: [https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv]\r\n\r\nThe data for this project come from this source: [http://groupware.les.inf.puc-rio.br/har]. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment.\r\n\r\n##What you should submit\r\n\r\nThe goal of your project is to predict the manner in which they did the exercise. This is the “classe” variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.\r\n\r\nYour submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).\r\nYou should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.\r\n\r\n# Initial Work\r\nAn overall random number  seed was set at 1234 for all the code used. In order to reproduce the results as was obtained for this Project, the same seed should be used.\r\nFirstly, different packages were downloaded and installed, such as caret and randomForest. These should also be installed in order to reproduce the results below. \r\n\r\n## Packages, Libraries, Seed\r\n\r\nFor Installing packages, loading libraries, and setting the seed for reproduceability the following code were used:\r\n### For Installing caret package\r\ninstall.packages(\"caret\")\r\n\r\n### For Installing randomForest\r\ninstall.packages(\"randomForest\")\r\n\r\n### For Installing rpart package\r\ninstall.packages(\"rpart\")\r\n\r\nlibrary(caret)\r\n### Loading required package: lattice\r\n### Loading required package: ggplot2\r\n\r\n### Random forest for classification and regression\r\nlibrary(randomForest) \r\n\r\n### For Regressive Partitioning and Regression trees\r\nlibrary(rpart) \r\n\r\n### For Decision Tree plot\r\nlibrary(rpart.plot) \r\n\r\n### Also load RColorBrewer package\r\nlibrary(RColorBrewer)\r\n\r\n### Also load rattle package\r\nlibrary(rattle)\r\n\r\n### setting the overall seed for reproduceability\r\nset.seed(1234)\r\n\r\nLoading data sets and preliminary cleaning\r\n\r\nFirst we want to load the data sets into R and make sure that missing values are coded correctly.\r\nFor this we will delete irrelevany variables.Results will be hidden from the report for clarity and space considerations.\r\n\r\nThe training data set can be found on the following URL\r\n\r\ntrainUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\r\n\r\nThe testing data set can be found on the following URL:\r\n\r\ntestUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\r\n\r\nLoad data to memory solely\r\n\r\ntraining <- read.csv(url(trainUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\r\ntesting <- read.csv(url(testUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\r\n\r\n# Partioning the training set into two\r\n\r\nPartioning Training data set into two data sets, 60% for myTraining, 40% for myTesting:\r\n\r\ninTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)\r\nmyTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]\r\ndim(myTraining); dim(myTesting)\r\n\r\n#### [1] 11776    160\r\n#### [1] 7846     160\r\n\r\n# Cleaning the data\r\nThe following transformations were used to clean the data:\r\n\r\nTransformation 1: Cleaning NearZeroVariance Variables Run this code to view possible NZV Variables:\r\n\r\nmyDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)\r\n\r\nRun this code to create another subset without NZV variables:\r\n\r\nmyNZVvars <- names(myTraining) %in% c(\"new_window\", \"kurtosis_roll_belt\", \"kurtosis_picth_belt\",\r\n\"kurtosis_yaw_belt\", \"skewness_roll_belt\", \"skewness_roll_belt.1\", \"skewness_yaw_belt\",\r\n\"max_yaw_belt\", \"min_yaw_belt\", \"amplitude_yaw_belt\", \"avg_roll_arm\", \"stddev_roll_arm\",\r\n\"var_roll_arm\", \"avg_pitch_arm\", \"stddev_pitch_arm\", \"var_pitch_arm\", \"avg_yaw_arm\",\r\n\"stddev_yaw_arm\", \"var_yaw_arm\", \"kurtosis_roll_arm\", \"kurtosis_picth_arm\",\r\n\"kurtosis_yaw_arm\", \"skewness_roll_arm\", \"skewness_pitch_arm\", \"skewness_yaw_arm\",\r\n\"max_roll_arm\", \"min_roll_arm\", \"min_pitch_arm\", \"amplitude_roll_arm\", \"amplitude_pitch_arm\",\r\n\"kurtosis_roll_dumbbell\", \"kurtosis_picth_dumbbell\", \"kurtosis_yaw_dumbbell\", \"skewness_roll_dumbbell\",\r\n\"skewness_pitch_dumbbell\", \"skewness_yaw_dumbbell\", \"max_yaw_dumbbell\", \"min_yaw_dumbbell\",\r\n\"amplitude_yaw_dumbbell\", \"kurtosis_roll_forearm\", \"kurtosis_picth_forearm\", \"kurtosis_yaw_forearm\",\r\n\"skewness_roll_forearm\", \"skewness_pitch_forearm\", \"skewness_yaw_forearm\", \"max_roll_forearm\",\r\n\"max_yaw_forearm\", \"min_roll_forearm\", \"min_yaw_forearm\", \"amplitude_roll_forearm\",\r\n\"amplitude_yaw_forearm\", \"avg_roll_forearm\", \"stddev_roll_forearm\", \"var_roll_forearm\",\r\n\"avg_pitch_forearm\", \"stddev_pitch_forearm\", \"var_pitch_forearm\", \"avg_yaw_forearm\",\r\n\"stddev_yaw_forearm\", \"var_yaw_forearm\")\r\n\r\nmyTraining <- myTraining[!myNZVvars]\r\n\r\n### To check the new Number of observations\r\ndim(myTraining)\r\n\r\n####  [1] 11776     100\r\n\r\nTransformation 2: Killing first column of Dataset - ID Removing first ID variable so that it does not interfer with ML Algorithms:\r\n\r\nmyTraining <- myTraining[c(-1)]\r\n\r\nTransformation 3: Cleaning Variables with too many NAs. For Variables that have more than a 60% threshold of NA’s I’m going to leave them out:\r\n\r\ntrainingV3 <- myTraining #creating another subset to iterate in loop\r\n\r\nfor(i in 1:length(myTraining)) { #for every column in the training dataset\r\n        if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations\r\n        for(j in 1:length(trainingV3)) {\r\n            if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:\r\n                trainingV3 <- trainingV3[ , -j] #Remove that column\r\n            }   \r\n        } \r\n    }\r\n}\r\n#To check the new N?? of observations\r\ndim(trainingV3)\r\n\r\n#### [1] 11776     58\r\n\r\n### Seting back to our set:\r\nmyTraining <- trainingV3\r\nrm(trainingV3)\r\n\r\nNow let us do the exact same 3 transformations but for our myTesting and testing data sets.\r\n\r\nclean1 <- colnames(myTraining)\r\nclean2 <- colnames(myTraining[, -58]) #already with classe column removed\r\nmyTesting <- myTesting[clean1]\r\ntesting <- testing[clean2]\r\n\r\n#To check the new Number of observations\r\n\r\ndim(myTesting)\r\n\r\n#### [1] 7846     58\r\n\r\n### To check the new Number of observations\r\ndim(testing)\r\n\r\n#### [1] 20    57\r\n\r\nIn order to ensure proper functioning of Decision Trees and especially RandomForest Algorithm with the Test data set (data set provided), we need to coerce the data into the same type.\r\n\r\nfor (i in 1:length(testing) ) {\r\n        for(j in 1:length(myTraining)) {\r\n        if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {\r\n            class(testing[j]) <- class(myTraining[i])\r\n        }      \r\n    }      \r\n}\r\n\r\n### And to make sure Coertion really worked, simple smart ass technique:\r\n\r\ntesting <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:\r\ntesting <- testing[-1,]\r\n\r\n## Using ML algorithms for prediction: Decision Tree\r\nmodFitA1 <- rpart(classe ~ ., data=myTraining, method=\"class\")\r\n\r\nNote: to view the decision tree with fancy run this command:\r\n\r\nfancyRpartPlot(modFitA1)\r\n\r\n\r\n## Predicting:\r\n\r\npredictionsA1 <- predict(modFitA1, myTesting, type = \"class\")\r\nUsing confusion Matrix to test results:\r\n\r\nconfusionMatrix(predictionsA1, myTesting$classe)\r\n\r\n Confusion Matrix and Statistics\r\n###\r\n###           Reference\r\n### Prediction    A    B    C    D    E\r\n###         A 2150   60    7    1    0\r\n###        B   61 1260   69   64    0\r\n###          C   21  188 1269  143    4\r\n###         D    0   10   14  857   78\r\n###       E    0    0    9  221 1360\r\n###\r\n### Overall Statistics\r\n###                                         \r\n###                Accuracy : 0.879         \r\n###                 95% CI : (0.871, 0.886)\r\n###     No Information Rate : 0.284         \r\n###    P-Value [Acc > NIR] : <2e-16        \r\n###                                      \r\n###                   Kappa : 0.847         \r\n###  Mcnemar's Test P-Value : NA            \r\n###\r\n###Statistics by Class:\r\n### \r\n###                     Class: A Class: B Class: C Class: D Class: E\r\n### Sensitivity             0.963    0.830    0.928    0.666    0.943\r\n### Specificity             0.988    0.969    0.945    0.984    0.964\r\n###Pos Pred Value          0.969    0.867    0.781    0.894    0.855\r\n### Neg Pred Value          0.985    0.960    0.984    0.938    0.987\r\n### Prevalence              0.284    0.193    0.174    0.164    0.184\r\n###Detection Rate          0.274    0.161    0.162    0.109    0.173\r\n###Detection Prevalence    0.283    0.185    0.207    0.122    0.203\r\n### Balanced Accuracy       0.976    0.900    0.936    0.825    0.954\r\n\r\n## Using ML algorithms for prediction: Random Forests\r\n\r\nmodFitB1 <- randomForest(classe ~. , data=myTraining)\r\n\r\n### Predicting in-sample error:\r\n\r\npredictionsB1 <- predict(modFitB1, myTesting, type = \"class\")\r\n\r\n### Using confusion Matrix to test results:\r\n\r\nconfusionMatrix(predictionsB1, myTesting$classe)\r\n\r\n### Confusion Matrix and Statistics\r\n###\r\n###          Reference\r\n### Prediction    A    B    C    D    E\r\n###         A 2231    2    0    0    0\r\n###        B    1 1516    2    0    0\r\n###         C    0    0 1366    3    0\r\n###       D    0    0    0 1282    2\r\n###       E    0    0    0    1 1440\r\n###\r\n### Overall Statistics\r\n###                                        \r\n###              Accuracy : 0.999         \r\n###                 95% CI : (0.997, 0.999)\r\n###   No Information Rate : 0.284         \r\n###     P-Value [Acc > NIR] : <2e-16        \r\n###                                         \r\n###                 Kappa : 0.998         \r\n###  Mcnemar's Test P-Value : NA            \r\n###\r\n### Statistics by Class:\r\n###\r\n###                      Class: A Class: B Class: C Class: D Class: E\r\n### Sensitivity             1.000    0.999    0.999    0.997    0.999\r\n### Specificity             1.000    1.000    1.000    1.000    1.000\r\n### Pos Pred Value          0.999    0.998    0.998    0.998    0.999\r\n### Neg Pred Value          1.000    1.000    1.000    0.999    1.000\r\n### Prevalence              0.284    0.193    0.174    0.164    0.184\r\n### Detection Rate          0.284    0.193    0.174    0.163    0.184\r\n### Detection Prevalence    0.285    0.194    0.174    0.164    0.184\r\n### Balanced Accuracy       1.000    0.999    0.999    0.998    0.999\r\n\r\n## andom Forests yielded better Results, as expected\r\n\r\n##Generating Files to submit as answers for the Assignment:\r\n\r\nFinally, using the provided Test Set out-of-sample error.\r\n\r\nFor Random Forests we use the following formula, which yielded a much better prediction in in-sample:\r\n\r\npredictionsB2 <- predict(modFitB1, testing, type = \"class\")\r\nFunction to generate files with predictions to submit for assignment\r\n\r\npml_write_files = function(x){\r\n  n = length(x)\r\n  for(i in 1:n){\r\n    filename = paste0(\"problem_id_\",i,\".txt\")\r\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n  }\r\n}\r\n\r\npml_write_files(predictionsB2)\r\n\r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}